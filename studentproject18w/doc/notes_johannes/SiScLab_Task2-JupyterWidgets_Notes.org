#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+TITLE: SiScLab_Task2-JupyterWidgets_Notes
#+DATE: <2018-12-12 Mi>
#+AUTHOR: Johannes Wasmer
#+EMAIL: johannes@joe-9470m
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.2.2 (Org mode 9.1.13)

#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto html-preamble:t
#+OPTIONS: html-scripts:t html-style:t html5-fancy:nil tex:t
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+SUBTITLE:
#+INFOJS_OPT:
#+CREATOR: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 25.2.2 (<a href="https://orgmode.org">Org</a> mode 9.1.13)
#+LATEX_HEADER:

top-level items: newest is last
* [[file:SiScLab_Notes.org][Master File]]
* Installing stuff for Notebook and JupyterLab
items: newest is last
** Instructions
- Jupyter Widgets:
minimal from [[https://ipywidgets.readthedocs.io/en/stable/user_install.html][readthedocs]]:
#+BEGIN_SRC shell
source activate masci-tools
conda install --channel conda-forge ipywidgets
#+END_SRC
or full from [[https://github.com/jupyter-widgets/tutorial][tutorial]]:
#+BEGIN_SRC shell
source activate masci-tools
conda create -n widgets-tutorial -c conda-forge python=3.6 pip notebook=5.5 numpy scikit-image scipy pandas=0.23 requests
conda activate widgets-tutorial
# Install widgets from conda-forge
conda install -c conda-forge ipywidgets=7.2 bqplot ipyvolume ipyleaflet pythreejs ipyevents
# Install one more package from a different channel
conda install -c wwt pywwt
# Create a kernel for this environment
ipython kernel install --name widgets-tutorial --display-name widgets-tutorial --sys-prefix
# The remaining steps are necessary only if using JupyterLab:
# Install JupyterLab
conda install -c conda-forge jupyterlab nodejs=9.11
# Enable JupyterLab extensions, which may take several minutes
jupyter labextension install @jupyter-widgets/jupyterlab-manager bqplot ipyvolume jupyter-threejs jupyter-leaflet
#+END_SRC
- [[https://github.com/aiidalab/aiidalab-appmode][aiidalab-appmode]]:
#+BEGIN_SRC shell
source activate masci-tools
conda install --channel conda-forge appmode
#+END_SRC
- [[https://github.com/jupyter/dashboards][Jupyter Dashboards]]
  - Tried it, was buggy. Use appmode. For development, JupyterLab doesn't need
    an extension for this: just right-click on the output > create view, and
    drag the new tab to the desired place. For deployment in aiidalab or with
    mybinder.org, will still need the appmode though.

** What I (JW) did
#+BEGIN_SRC shell
  # essential stuff
  source activate masci-tools

  (mascitools) conda install --channel conda-forge ipywidgets appmode ipyvolume jupyter_dashboards
  # appmode worked, dashboards buggy

  # optional: some helpful notebook extensions
  conda install --channel conda-forge jupyterthemes jupyter_highlight_selected_word jupyter_nbextensions_configurator
  conda install nb_conda
  # This tool enriches the notebook: u see available evnironments and can change
  # kernels on the fly. this might be important when an important of a package u
  # just installed doesn't work in the noteboook. might be that u think u are in
  # an env but actually the notebook uses the base python. UPDATE: I saw a better
  # alternative to nb_conda somewhere, but forgot it's name.
#+END_SRC

Did simple ipywidgets tutorial from youtube, [[https://www.youtube.com/watch?v=SN0Bflf14C4][interactive matplotlib sine wave
plot with sliders]].

** More installations for [[https://github.com/jupyter-widgets/tutorial][Jupyter Widgets Tutorial]]
#+BEGIN_SRC shell

# Install widgets from conda-forge
conda install -c conda-forge bqplot ipyvolume ipyleaflet pythreejs ipyevents

# Install one more package from a different channel
# Not done for now, this is 'Python Interface to World Wide Telescope',
# probably only needed for some example
# conda install -c wwt pywwt
#+END_SRC

Check install says some packages need to be upgraded. But actually my versions
are newer. so let it be.
#+BEGIN_SRC shell
cd jupyter-widgets_official-tutorial/
source active masci-tools
(masci-tools) python install_check.py
# Please upgrade ipywidgets to version 7.2 by running:...
# Please upgrade notebook to version 5.5 by running: ...
# Please create custom kernel with:  ipython kernel install --name widgets-tutorial --display-name widgets-tutorial --sys-prefix
(masci-tools) conda list -n masci-tools | grep ipywidgets
ipywidgets                7.4.2                      py_0    conda-forge
(masci-tools) conda list -n masci-tools | grep notebook
notebook                  5.7.2                    py36_0
#+END_SRC

Okay, but I can do that: create custom kernel.
#+BEGIN_SRC shell
(masci-tools) ipython kernel install --name widgets-tutorial --display-name widgets-tutorial --sys-prefix
# Installed kernelspec widgets-tutorial in /home/johannes/anaconda3/envs/masci-tools/share/jupyter/kernels/widgets-tutorial
#+END_SRC

** Installing & using modules in JupyterLab
*** matplotlib
- Followed installation instructions for ~conda~ from [[https://github.com/matplotlib/jupyter-matplotlib][jupyter-matplotlib]] (the
  order is important; otherwise steps downstream have to be repeated):
  #+BEGIN_SRC shell
  source activate masci-tools
  conda install -c conda-forge ipympl
  # If using the Notebook
  conda install -c conda-forge widgetsnbextension
  # If using JupyterLab
  conda install nodejs
  jupyter labextension install @jupyter-widgets/jupyterlab-manager
  jupyter labextension install jupyter-matplotlib
  #+END_SRC
*** ipyvolume
- installed ipyvolume for jupyterlab:
  #+BEGIN_SRC shell
  # install ipyvolumen through conda-forge
  conda install -c conda-forge ipyvolume
  jupyter labextension install ipyvolume
  #+END_SRC
*** PyViz Panel
- [[https://panel.pyviz.org/][installation guide]]
- [[https://github.com/pyviz/panel/issues/159][example: pyviz panel + matplotlib in jupyter]]
* Working with Jupyter Notebook or JupyterLab
** Using interactive matplotlib plots
- See [[https://matplotlib.org/tutorials/introductory/usage.html#what-is-interactive-mode][matplotlib > interactive mode]] for basics
- See [[https://matplotlib.org/tutorials/introductory/usage.html#backends][matlplotlib > backends]] for a list of supported backends
- See [[https://ipython.readthedocs.io/en/stable/interactive/magics.html][ipython > magics]] for how to set the backend in a notebook. Have to write
  ~%matplotlib BACKEND~, ~BACKEND~ is the appropriate gui name backend for where
  the IPython cell is run.
  | ~BACKEND~ | Description                              | tested: works in        |
  |-----------+------------------------------------------+-------------------------|
  | ~widget~  | [[https://github.com/matplotlib/jupyter-matplotlib][jupyter-matplotlib]] or ~ipympl~ for short | jupyterlab, notebook    |
  | ~nbagg~   |                                          | notebook, not lab       |
  |-----------+------------------------------------------+-------------------------|
  | ~inline~  | often mentioned online for notebooks     | untested                |
  | ~ipympl~  | the same as ~widget~?                    | untested                |
  |-----------+------------------------------------------+-------------------------|
** Not advisable: How PyCharm starts Jupyter Notebook
- [[https://www.jetbrains.com/help/pycharm/using-ipython-notebook-with-product.html][PyCharm Guide > Jupyter Notebook]] explains how to best start the Notebook
  server from an opened PyCharm project. Advantage: using project modules works
  out of the box. Disadvantages: Notebooks created by PyCharm often get invalid
  (run > all cells if the warning occurs, then it goes away). PyCharm often
  complains that changes in the notebook opened in the browser conflict with the
  notebook opened in pycharm.
- for me, importing the studentproject18ws code in notebook only works if i
  start the notebook from the PyCharm project using the Project conda env, how
  to see [[https://www.jetbrains.com/help/pycharm/using-ipython-notebook-with-product.html][here]]. For the project, I use a separate conda environment called
  =masci-tools= where all python and jupyter dependencies are installed. PyCharm
  then runs this command in the terminal to start the notebook:
#+BEGIN_SRC shell
/home/johannes/anaconda3/envs/masci-tools/bin/python /home/johannes/anaconda3/envs/masci-tools/bin/jupyter-notebook --no-browser --ip 127.0.0.1 --port 8888 --port-retries=0
#+END_SRC
  It outputs a clickable URL.
** How to start Notebook/JupyterLab and import your project modules
The best way I find is to do it like this (using conda env ~masci-tools~ to
which all Python and Jupyter dependencies have been installed).
#+BEGIN_SRC shell
  cd myprojectpath
  source activate masci-tools
  # ----------------
  # optional: check:
  # - if the env's jupyter is used: 'which jupyter-notebook', 'which jupyter-lab'.
  # - if all needed jupyter deps are installed: 'conda list'
  # ----------------
  # All okay? Start lab (or juypter-notebook)
  (masci-tools) jupyter-lab
#+END_SRC

Now, the lab/notebook's home dir will be ~myprojectpath~. But you won't be able
to import modules from your project (if it's not installed to the env's python
via pip). In order to do that, enter this in the first notebook cell. Adjust the
folder names / absolute path if needed.
#+BEGIN_SRC python
  # Setup project path
  # ------------------
  # IMPORTANT: we need to import stuff from masci-tools folder.
  # Since masci-tools is not installed as a module (yet), the notebook kernel
  # needs to be started in the masci-tools folder.
  # If that has not happened for some reason, then need to add the masci-tools
  # manually to the sys path.
  import os
  import sys

  cwd = os.getcwd()
  path_mtools = cwd
  dirname_mtools = "masci-tools"
  # first try if we can get away without needing an absolute path
  if dirname_mtools in path_mtools:
      while os.path.basename(path_mtools) != dirname_mtools:
          path_mtools = os.path.split(path_mtools)[0]
  else:
      # okay, try with an absolute path
      path_mtools = "/home/johannes/Desktop/Studium/Kurse_RWTH/SiScLab/18W/repos/masci-tools"
      if not os.path.isdir(path_mtools):
          raise IOError(f"Could not find path to masci-tools. Please specify absolute path.")

  # found masci-tools. add to syspath (for imports) and chdir.
  if path_mtools not in sys.path:
      # add only once
      sys.path.append(path_mtools)
  # Now you can import stuff from your development project.
#+END_SRC
* Unsorted: general problems & solutions
** Is it possible to put a matplotlib plot inside an ipywidgets container?
Yes, in an =Output= widget. Even in interactive mode. Tested.
#+BEGIN_SRC python
# Testet in jupyterlab:
# works with backend inline, but not interactive then 
# works with backend widget, is interactive then (reload if outside of tab)
%matplotlib widget
import matplotlib.pyplot as plt
import pandas as pd
import ipywidgets as widgets
import numpy as np

out1 = widgets.Output()
out2 = widgets.Output()
data1 = pd.DataFrame(np.random.normal(size = 50))
data2 = pd.DataFrame(np.random.normal(size = 100))

tab = widgets.Tab(children = [out1, out2])
tab.set_title(0, 'First')
tab.set_title(1, 'Second')
display(tab)

with out1:
    fig1, axes1 = plt.subplots()
    data1.hist(ax = axes1)
    plt.show(fig1)

with out2:
    fig2, axes2 = plt.subplots()
    data2.hist(ax = axes2)
    plt.show(fig2)
#+END_SRC
Side note: there is a [[https://github.com/jupyter-widgets/ipywidgets/issues/378][unsolved request]] for a dedicated mpl ipywidget.
* Side-Note: Desktop frontends for Jupyter
- Jupyter Notebooks don't have to be used in the browser. There are attempts to
  use them in desktop apps, so you get a spyder-like feel, but better.
- tried out:
  - Atom Editor > Hydrogen extension
    - very cool. but couldn't figure out how to switch to a different conda
      environment. ~source activate myenv && cd myproject && atom .~ as
      suggested somewhere didn't work. so abandones for now.
  - Nteract.io
    - wasn't impressed
  - nteract_on_jupyter
    - not tried out yet
* TODO SORT: More module dependencies
- periodictable
