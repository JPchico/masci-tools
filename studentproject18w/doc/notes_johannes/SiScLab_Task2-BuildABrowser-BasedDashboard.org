#+options: ':nil *:t -:t ::t <:t h:3 \n:nil ^:t arch:headline author:t
#+options: broken-links:nil c:nil creator:nil d:(not "logbook") date:t e:t
#+options: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+options: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+title: Guide: Building a Python Browser-based Dashboard
#+date: <2018-12-12 mi>
#+author: johannes wasmer
#+email: johannes@joe-9470m
#+language: en
#+select_tags: export
#+exclude_tags: noexport
#+creator: emacs 25.2.2 (org mode 9.1.13)

#+options: html-link-use-abs-url:nil html-postamble:auto html-preamble:t
#+options: html-scripts:t html-style:t html5-fancy:nil tex:t
#+html_doctype: xhtml-strict
#+html_container: div
#+description:
#+keywords:
#+html_link_home:
#+html_link_up:
#+html_mathjax:
#+html_head:
#+html_head_extra:
#+subtitle:
#+infojs_opt:
#+creator: <a href="https://www.gnu.org/software/emacs/">emacs</a> 25.2.2 (<a href="https://orgmode.org">org</a> mode 9.1.13)
#+latex_header:

* [[file:SiScLab_Notes.org][Master File]]
* COMMENT (Guide Update Log)
- newest is first

- just discovered again that [[*JupyterLab][JupyterLab]] is now stable, works with all major
  Jupyter Widgets and many extensions by now, and is the eventual natural
  replacement for Jupyter Notebooks, just like Python3 is the eventual natural
  replacement for Python2. Will try to get things working in JupyterLab now,
  because it solves a lot of the problems people dislike about Jupyter
  Notebooks, mainly the interface.

- Worked a bit with (Jupyter Widgets) ipywidgets+matplotlib. Noted that this
  approach enables limited plot interactivity: you can rescale the plot and
  change parameters, but get no in-plot tooltips (which datapoint on mouse
  hover-over), or selections. This could be done with doing the plot not with
  matplotlib, but one of (bqplot, hvPlot/Holoviews, plotly, Bokeh). What I'm
  saying is: I can build a dashboard in Jupyter with appmode, and I can use
  different plot libs for different plots. I don't have to use Jupyter Widgets
  for everything. See [[https://colab.research.google.com/notebooks/charts.ipynb][google colab charts (live example: matplotlib seaborn
  altair plotly bokeh)]].
* Intro
- The *example application* this guide was written for was a student project for
  the github repo [[https://github.com/JuDFTteam/masci-tools][masci-tools]]. The GUI / dashboard allowed a user to perform
  data analysis on the band structure and/or density of states (DOS) from a HDF5
  format output file from a [[http://www.flapw.de/pm/index.php][fleur]] or [[https://aiida-fleur.readthedocs.io/en/develop/][aiida-fleur]] calculation. The dashboard
  showed a band structure/DOS plot, a 3D brillouin zone plot, and sported
  widgets (controls) to change data selection and representation. Since the
  application case is vaguely connected to the AiiDa / [[https://www.materialscloud.org/work/tools/options][materialscloud.org]]
  project, targeted deployment options were Jupyter apps to be run in the
  [[https://www.materialscloud.org/work/menu][Aiidalab]] (a JupyterHub), or as standalone web-app as [[https://www.materialscloud.org/work/menu][materialscloud.org tool]].
  Therefore, these two deployment applications are sometimes mentioned in this
  guide.
- Term definitons and synonyms used in this guide, independent of ecosystem
  (Python, Javascript, etc.). Will use these synonym terms interchangeably.
  - *Developer concerns*:
    - *Dashboard*: the end-product: a browser-based GUI. Synonyms: web-app,
      frontend.
    - *Building*: connection of the dashboard to a backend, selection of tool
      dependencies to build the dashboard.
    - *Deployment*: selection of solution and dependencies for making the
      dashboard available to the end-users with minimal user effort.
      - *Out-of-the-box*: Deployment feature. No or minimal setup is required to
        run and use the dashboard by the end-user.
  - *Tool terms*:
    - *Tool*: a Python package. Synonyms: package, library (lib), extension
      (used in Jupyter context).
    - *Toolset*: a set of Python packages. The tools may depend on each other to a
      certain extent. Using tools from a toolset may lead to /minor/ technology lock-in.
    - *Framework*: a larger Python library smaller libraries may depend upon.
      Synonyms: environment, (solution) stack. The line between framework and
      package is left blurry in this guide. Using tools from a framework may
      lead to /major/ technology lock-in.
    - *Deployment Environment*: the (browser) environment or backend in which
      dashboard can be deployed.
    - *Standalone*: Generally, an app not depending on a particular deployment
      environment. In this guide though, standalone means that it is not
      dependent on the Jupyter environment.
- When limiting ourselves to that subset of the Python ecosystem which enables
  us to build *dashboards*, two main component types exist:
  - *Widgets*: buttons, sliders, menus, and so on. May include layout types like
    Hbox etc.
  - *Plots*: scatter plots, histograms, 3D plots, and so on.
  - It should be noted that, of course, one can build dashboards using
    non-Python Widget or Plot tools (ie, Javascript). This guide is not
    concerned with that.
- It is helpful to think of Widgets and Plots as being made available via
  separate packages.
* Tool Selection I: Widget Libraries
- There are many more Plots packages than Widgets packages available for
  building a dashboard.
- The choice of Widget package one uses for the dashboard to a certain extent
  determines the possible deployment environment for the dashboard.
- Therefore, it makes sense to get an overview of the Widget tools, and which
  toolsets or frameworks they are part of. The selection here only includes
  tools that are mature and actively maintained as of <2019-01-05 Sat>.
  | Widget Package  | Part of Toolset | Part of Framework | Deployment Environment               |
  |-----------------+-----------------+-------------------+--------------------------------------|
  | [[https://github.com/jupyter-widgets/ipywidgets][ipywidgets]] 1)   | [[https://github.com/jupyter-widgets/ipywidgets][Jupyter Widgets]] | [[https://jupyter.org/][Jupyter Notebook]]  | Jupyter 2), standalone 3), Plotly 4) |
  | [[https://bokeh.pydata.org/en/latest/docs/user_guide/interaction/widgets.html][Bokeh Widgets]]   | [[https://bokeh.pydata.org/en/latest/docs/user_guide/interaction/widgets.html][Bokeh]]           | [[https://bokeh.pydata.org/en/latest/docs/user_guide/interaction/widgets.html][Bokeh]]             | Bokeh Server, standalone 5)          |
  | [[https://panel.pyviz.org/][Panel]]           | [[https://panel.pyviz.org/][PyViz]]           | -                 | Jupyter, Bokeh                       |
  | [[https://dash.plot.ly/dash-core-components][Dash Components]] |                 | [[https://plot.ly/products/dash/][Dash by Plotly]]    | standalone                           |
  Annotations:
  - 1) some Jupyter Notebook extensions may be needed to be able to build a
    dashboard, see below.
  - 2) includes Jupyter Notebook, JupyterHub, JupyterLab (see below)
  - 3) dashboards (meaning a user-built 'widget' composed of other widgets) can
    be [[https://ipywidgets.readthedocs.io/en/stable/embedding.html][embedded in HTML]] pages, although with limited functionality I think? More
    see below.
  - 4) [[https://plot.ly/python/widget-app/][example]]. see Plotly below.
  - 5) Bokeh widget functionality can be implemented using [[https://bokeh.pydata.org/en/latest/docs/user_guide/interaction/widgets.html][pure Javascript
    callbacks]]. google 'bokeh standalone' for more info.
* Tool Selection II: Deployment Options
- Once the choice of Widget tool has been made, before reviewing the Plot tools
  selection this allows, it makes sense to first review the *deployment options*
  this allows.
  - Jupyter:
    - it runs in a Jupyter Notebook. *Out-of-the-box*: No.
    - it runs in [[https://jupyterlab.readthedocs.io/en/stable/][JupyterLab]]. *Out-of-the-box*: No. In addition, it should be
      noted that JupyterLab is a recent reimplementation, and will eventually
      replace Jupyter Notebook. So tools working in Notebooks do not necessarily
      work in JupyterLab as of <2019-01-05 Sat>. In time, it can be expected
      that most notebook tools will be made compatible to work in JupyterLab,
      too.
    - it can be run as Notebook in [[https://mybinder.org/][binder]]. *Out-of-the-box*: yes, but startup
      may be slow. Perhaps file I/O may be problematic?
    - For *the example applicaton*:  this would mean deploying the dashboard as
      an [[https://www.materialscloud.org/work/menu][AiidaLab app]]. See below.
    - Other options late 2018: [[https://github.com/QuantStack/voila][voila]], [[https://github.com/minrk/thebelab][thebelab]] from [[https://github.com/pyviz/panel/issues/159][jupyter-widgets dashboarding
      discussion]]
    - docker / [[https://www.sylabs.io/docs/][singularity]] image (singularity became [[https://www.hpcwire.com/2018-hpcwire-awards-readers-editors-choice/15/][very popular in 2018]],
      perhaps too complex for deploying a simple dashboard).
  - Bokeh: see Plot tools discussion below.
  - standalone:
    - this can mean something different depending on the selected framework. See
      Plot tools discussion below.
    - for the *example application*: this would mean deploying the dashboard as
      a [[https://www.materialscloud.org/work/menu][materialscloud.org tool]]. See below.
    - static SciVis Plots (e.g. matplotlib, seaborn etc) can be very simply
      deployed as a standalone Flask app: [[https://towardsdatascience.com/python-plotting-api-expose-your-scientific-python-plots-through-a-flask-api-31ec7555c4a8][instructions]].
* (Tool Selection for the Example Application: AiiDaLab Tools)
- AiiDAlab ([[https://aiidalab.materialscloud.org/hub/login][aiidalab official]], [[https://github.com/aiidalab][aiidalab github]]) is a Jupyter server ([[https://github.com/jupyterhub/jupyterhub][JupyterHub]])
  accessible on materialscloud.org via login. So apps developed for it can use
  [[http://jupyter.org/widgets][Jupyter Widgets]] and be used by any aiidalab user anywhere. The problem of
  finding a solution that works in Jupyter *and can be deployed as standalone
  web-app* (see next section) is thus not eliminated, but can be ignored for the
  initial phase at least. I think long-term the possibilities PyViz is offering
  (see next section) should be at least tried out.
** [[https://github.com/aiidalab][AiiDAlab Tools]] / Resources for building AiiDAlab Apps
- For complementary Jupyter resources not used in AiiDAlab stack so far, see
  also section [[*Jupyter Widgets][Jupyter Widgets]] below.

|                   | Name                     | Description                                    |
|-------------------+--------------------------+------------------------------------------------|
| AiiDAlab          | [[https://github.com/aiidalab/aiidalab-widgets-base][aiidalab-widgets-base]]    | AiiDA widgets for AiiDA Lab applications       |
| (Jupyter)         | [[https://github.com/aiidalab/aiidalab-appmode][aiidalab-appmode]]         | turns notebooks into web applications          |
|                   | [[https://www.youtube.com/playlist?list=PL19kfLn4sO_8O_yQTL6KK0nC2adrrLqmi][Jupyter @ materialscloud]] | youtube playlist showing AiidaLab app creation |
|                   | [[https://github.com/aiidalab/aiidalab-registry][aiidalab-registry]]        | app registry to install apps                   |
|-------------------+--------------------------+------------------------------------------------|
| materialscloud    | [[https://github.com/aiidalab/aiidalab-app-cutter][aiidalab-app-cutter]]      | Cookie cutter recipe Materials Cloud apps      |
| tools (standalone | [[https://github.com/giovannipizzi/seekpath#online-service-tool][seekpath]]                 | example app code including deployment          |
| web-apps)         |                          |                                                |
|-------------------+--------------------------+------------------------------------------------|
|                   | [[https://aiida-core.readthedocs.io/en/stable/developer_guide/index.html][AiiDA developer doc]]      | ONLY AiiDA, nothing on AiiDAlab                |

* Tool Selection III: Plot Libraries
#+NAME: fig:figure name
#+CAPTION: The Python Visualization Landscape 2017
#+ATTR_ORG: :width 800/200/250/300/400/500
#+ATTR_LATEX: :width 2.0in
#+ATTR_HTML: :width 800/200/250/300/400/500px
[[file:img/landscape.png]]
The Python Visualization Landscape 2017. [[https://github.com/rougier/python-visualization-landscape][source (clickable html graph)]].

- This overview is written with the emphasis of finding a solution that can be
  deployed in a Jupyter environment *as well as* a standalone web-app independent
  of Jupyter, like the [[https://www.materialscloud.org/work/tools/options][materialscloud tools]].
  #+BEGIN_QUOTE
   [[https://ipywidgets.readthedocs.io/en/stable/][ipywidgets]]-based libraries (ipyleaflet, pythreejs, ipyvolume, bqplot) are
   *difficult to deploy as public-facing apps because the Jupyter server allows
   arbitrary code execution*.
  #+END_QUOTE
  Though there are workarounds for this like [[https://mybinder.org/v2/gh/jupyter-widgets/tutorial/master][mybinder.org]] (and others, see
  above). Also, [[*JupyterLab][JupyterLab]] seems to have solved many of the Jupyter Notebook
  shortcomings as of late 2018.
** My personal summary
- *If non-public-only use: use Jupyter Widgets +in Jupyter Notebook+ /in
  JupyterLab/ . *If public use (standalon web-app), no Jupyter intended: use
  Dash*. /Those options are mutually exclusive/. *The middle-ground best
  long-term option /would/ be using [[http://pyviz.org/][Pyviz]]*, because it's different from the
  former two, it's deployable for Jupyter *and* as standalone web-app. *But*,
  PyViz has downsides for the intended application (minimal unmaintained 3D
  support, no Flask deployment yet), so it's out again.
- From the standpoint of making the GUI tool available to AiiDA users, there are
  two possibilities: as a Jupyter dashboard for use in the JupyterHub-based
  [[https://github.com/aiidalab][AiiDAlab]] and it's [[https://github.com/aiidalab/aiidalab-app-cutter][app cutter]], or as a stand-alone browser tool to be added to
  the [[https://www.materialscloud.org/work/tools/options][materialscloud toolset]]. The latter one is a solution only based on
  Javascript and Flask, see [[https://github.com/giovannipizzi/seekpath#online-service-tool][the example tool seekpath]] by Giovanni Pizzi. Again,
  for that goal just could use Dash: /Dash uses a Flask server, so you can
  deploy Dash apps in the same way that you would deploy Flask apps/. But then
  we lose the Jupyter compatibility again.
- For running a web-based GUI (=dashboard) with (interactive) plot
  visualization, there are basically four platforms to choose from: Jupyter,
  Plotly, or Bokeh, or a custom Flask+JavaScript solution (like [[https://www.materialscloud.org/infrastructure][materialscloud
  infrastructure]]). Jupyter is not a viable solution for web
  publication (like materialscloud tools), so basically two solutions for web
  publication remain: bokeh, or dash+flask (plotly) server. All other tools
  mentioned here support use in Jupyter notebooks, except maybe Dash. All other
  interactive tools mentioned here apart from dash/plotly use bokeh or custom
  solution for independent web publication.
- [[http://jupyter.org/widgets][Jupyter Widgets]]
  + mature
  - no standalone web apps (dashboards) possible, except e.g. through [[https://mybinder.org/v2/gh/jupyter-widgets/tutorial/master][binder]] (or
    others, see above)
  - Note: Jupyter Widgets is the umbrella term for Jupyter tools including the
    base Widgets package, and extension Plots packages.
- [[http://pyviz.org/][Pyviz]]: [[https://panel.pyviz.org/][Panel]], [[http://holoviews.org/][Holoviews]]
  - very young project
  + ambitious goal: independence of actual plotting tools, or even web-based
    visualization (for example for run on HPC cluster, see [[https://www.youtube.com/watch?v=aZ1G_Q7ovmc&t=13m50s][pyviz scipy2018
    workshop]]). dashboards, run on any platform (jupyter, bokeh, mpl, plotly).
    declarative approach, e.g. quote from [[http://pyviz.org/tutorial/12_Parameters_and_Widgets.html][panel tutorial]]:
    #+BEGIN_QUOTE
    Panel provides layout and two-way communication between Python and
    browser-based widgets, either in a Jupyter Notebook or in a separate widely
    shareable deployment. In this way it's similar to ipywidgets in a Jupyter
    notebook or Plotly Dash on a standalone server, but allows you to develop in
    Jupyter and deploy separately because the same code works in both contexts
    (unlike for ipywidgets or Dash).
    #+END_QUOTE
    [[https://github.com/pyviz/panel/issues/2][Panel: supported plotting libraries]]
  - support currently only jupyter and bokeh though, plotly as backend support
    lacks volunteers/doc. support for deployment in flask is only on the
    [[http://pyviz.org/Roadmap.html][roadmap]].
  - *no 3D*. [[http://pyviz.org/Roadmap.html][roadmap]] mentions that simple scatter and surface 3d plots are
    possible using plotly backend. works on my browser, see example [[http://holoviews.org/reference/elements/plotly/Scatter3D.html][Scatter3D]],
    but warns there that plotly backend is not really supported. Seems
    application-focused on data science, geo services, not scivis. If SciVis
    stuff should be built, the PyViz guys more or less say, 'use Bokeh. We built
    HoloViews with Bokeh'. Sources: [[http://pyviz.org/FAQ.html][pyviz FAQ]], youtube [[https://www.youtube.com/watch?v=aZ1G_Q7ovmc&t=13m50s][pyviz scipy2018 workshop]],
    [[https://www.youtube.com/watch?v=DGLi-UWReM8&t=3m47s][pyviz scipy2018 talk]].
- [[https://github.com/bokeh/bokeh][Bokeh]] 
  - development: powerful but complicated, needs time
  - needs JavaScript knowledge
  + good jupyter integration
- [[https://plot.ly/products/dash/][Dash]] 
  + development: simple but fast, limited
  + best solution right now for building independent web app (dashboard) fast
  + built on plotly
  - bad jupyter integration
- Plotly
  - Plotly plots can be deployed in [[https://plot.ly/python/getting-started/#initialization-for-online-plotting][online]] or [[https://plot.ly/python/getting-started/#initialization-for-offline-plotting][offline]] mode, or in [[https://plot.ly/python/getting-started/#start-plotting-online][jupyter notebooks]]. 
** Table Overview / Comparison
- Open Source: BSD, MIT license or similar
- Keywords: visualization, visual analytics, interactive, GUI, widgets,
  dashboard, web, browser-based, notebook
- in 2018, all libs have publication-quality publishing/export options

- *full interactive HTML5 with dashboard, widgets. all in active development 2018. all support 3D except PyViz.*
| Name             | age | description       | server         | Jupyter | Impression                         | developers |
|------------------+-----+-------------------+----------------+---------+------------------------------------+------------|
| [[http://pyviz.org/][pyviz]]: [[https://panel.pyviz.org/][Panel]]     |   1 | dashboards        | bokeh (plotly) | +       | cool, but mainly bokeh support     |         10 |
| [[http://pyviz.org/][pyviz]]: [[https://hvplot.pyviz.org/][hvPlot]]    |   1 | interactive plots | bokeh (plotly) | +       | just use holoviews?                |          9 |
| [[http://pyviz.org/][pyviz]]: [[http://holoviews.org/][holoviews]] |   2 | interactive plots | bokeh (plotly) | +       | declarative viz, tool-independent  |         42 |
| [[https://github.com/jwkvam/bowtie][bowtie]]           |   2 | dashboards        | ?              | +       | single-man effort                  |          3 |
| Plotly: [[https://plot.ly/products/dash/][Dash]]     |   3 | dashboards        | plotly         | o       | best for independent web app       |         22 |
| Plotly: [[https://plot.ly/][Plot.ly]]  |   4 | interactive plots | plotly         | +       | extensions: JavaScript             |         63 |
| [[http://jupyter.org/widgets][Jupyter Widgets]]  |   4 | dashboards, i.p.  | jupyter        | X       | best if jupyter lock-in acceptable |        120 |
| [[https://github.com/bokeh/bokeh][Bokeh]]            |   4 | interactive plots | bokeh          | X       | best if you have enough time       |        333 |
- Examples:
  - [[https://colab.research.google.com/notebooks/charts.ipynb][google colab charts (live example: matplotlib seaborn altair plotly bokeh)]]
  

- UNFINISHED: stale development, or little support for interactivity, dashboard, widgets
| Name           | description                | interactive | DW | Jupyter | 3D | last update | developers | built on |
|----------------+----------------------------+-------------+----+---------+----+-------------+------------+----------|
| [[https://toyplot.readthedocs.io/en/stable/][toyplot]]        |                            | o           | o  | ?       | ?  |        2018 |          6 |          |
| [[http://pygal.org/en/stable/][pygal]]          | specializes on svg output  | o           | -  | ?       | ?  |        2017 |         53 |          |
| [[http://mpld3.github.io/][mpld3]]          |                            | +           | ?  | ?       | ?  |        2017 |         38 |          |
|----------------+----------------------------+-------------+----+---------+----+-------------+------------+----------|
| matplotlib     |                            | -           |    | +       | +  |             |            |          |
| [[https://pandas.pydata.org/pandas-docs/stable/visualization.html#automatic-date-tick-adjustment][pandas viz api]] | mlp overlay                | -           |    | +       | +  |             |            | mpl      |
| seaborn        | mlp overlay for statistics |             |    | +       | +  |             |            |          |
| [[http://ggplot.yhathq.com/][ggplot]]         | mlp overlay for statistics | -           |    | ?       | +  |        2016 |         14 |          |
Legend:
- DW = support for widgets, dashboard: + full, o partial, - no

** Resources for Overview / Comparisons
- [[https://colab.research.google.com/notebooks/charts.ipynb][google colab charts (live example: matplotlib seaborn altair plotly bokeh)]]
- [[https://www.anaconda.com/blog/developer-blog/python-data-visualization-2018-why-so-many-libraries/][Anaconda Blog: Python Data Visualization 2018: Part 1]], [[https://www.anaconda.com/blog/developer-blog/python-data-visualization-moving-toward-convergence/][Part 2]]
  - date: 2018
  - best overview
  - *Note: Opiniated: Author is creator of PyViz*
  - User interface:
    - Standalone web-based dashboards and apps
      - Dash: Plotly, Dash
      - Bokeh Server: Bokeh, HoloViews, and GeoViews
      - Panel: Matplotlib, Altair, Plotly, Datashader, hvPlot, Seaborn, plotnine, and yt
      - Jupyter: ipywidgets, ipyleaflet, pythreejs, ipyvolume, bqplot, Jupyter Dashboard
        - Note: difficult to deploy as public-facing apps because the Jupyter
          server allows arbitrary code execution: tool lock-in
    #+BEGIN_QUOTE
    Standalone web-based dashboards and apps: Plotly graphs can be used in
    separate deployable apps with [[https://plot.ly/products/dash/][Dash]], and Bokeh, HoloViews, and GeoViews can
    be deployed using [[https://bokeh.pydata.org/en/latest/docs/user_guide/server.html][Bokeh Server]]. Most of the other InfoVis libraries can be
    deployed as dashboards using the new Panel library, including at least
    Matplotlib, Altair, Plotly, Datashader, hvPlot, Seaborn, plotnine, and yt.
    However, despite their web-based interactivity, the [[https://ipywidgets.readthedocs.io/en/stable/][ipywidgets]]-based
    libraries (ipyleaflet, pythreejs, ipyvolume, bqplot) are *difficult to
    deploy as public-facing apps because the Jupyter server allows arbitrary
    code execution* (but see the defunct Jupyter dashboards project and
    flask-ipywidgets for potential solutions).
    #+END_QUOTE
  - Widget/app support:
    #+BEGIN_QUOTE
    Previous mechanisms for providing widgets and support for apps and
    dashboards were often specific to Python plotting libraries, such as Dash
    for Plotly and Bokeh Server/Bokeh Widgets for Bokeh. A wide variety of
    plotting libraries now support usage with ipywidgets, making it feasible to
    switch between them or combine them as needed for particular
    notebook-related tasks relatively easily. This broad base of support makes
    the particular choice of ipywidgets-based library less crucial at the outset
    of a project. Many different plotting libraries can also be used with the
    new Panel app/widget library, either using the ipywidgets-style “interact”
    interface or as separate objects, either in a Jupyter notebook or in a
    separate server
    #+END_QUOTE
  - 
- [[https://www.youtube.com/playlist?list=PLYx7XA2nY5Gd-tNhm79CNMe_qvi35PgUR][SciPy2018 Youtube Playlist]]
  - search 'visual': either jupyter or pyviz
- [[https://blog.sicara.com/bokeh-dash-best-dashboard-framework-python-shiny-alternative-c5b576375f7f][Medium: Bokeh vs Dash — Which is the Best Dashboard Framework for Python?]]
  - date: 2018
  - result: Dash wins
  | thing           | bokeh          | dash             |
  |-----------------+----------------+------------------|
  | by              | anaconda       | plotly           |
  | license         | bsd 3-clause   | mit permissive   |
  | Python backend  | Tornado        | Flask            |
  | JS frontend     | D3             | React + Plotly   |
  | Jupyter support | yes            | only plotly      |
  | Only Python?    | some JS needed | yes for core lib |
- [[https://bowtie-py.readthedocs.io/en/latest/comparison.html][bowtie doc: comparison with dash, bokeh]]
  - date: 2018
    - dash: need html knowledge. bokeh: is old, didn't try out
- [[https://github.com/rougier/python-visualization-landscape][PyCon2017 Keynote: The Python Visualization Landscape]]
  - date: 2017
  - video, slides, [[http://rougier.github.io/python-visualization-landscape/landscape-colors.html][clickable graph]]
  - compares: all
- [[https://blog.modeanalytics.com/python-interactive-plot-libraries/][modeanalytics: 5 Python Libraries for Creating Interactive Plots]]
  - date: 2016
  - compares: mpld3, pygal, bokeh, holoviews, plotly
- [[https://www.reddit.com/r/Python/comments/4tuwoz/how_do_you_decide_between_the_plotting_libraries/][reddit - How do you decide between the plotting libraries: Matplotlib, Seaborn, Bokeh?]]
  - date: 2016
  - 
- [[http://pbpython.com/visualization-tools-1.html][pbpython Overview Python Viz Tools]]
  - date: 2015
  - compares: seaborn, ggplot, bokeh, pygal, plotly
  - the gist: didn't care for interactive, web. excel user

* Tools Resources
** matploblib
*** Cheatsheets / Soution Galleries / Helpful stuff
 | 2018 | [[https://towardsdatascience.com/all-your-matplotlib-questions-answered-420dd95cb4ff][twd - Matplotlib Guide For People In A Hurry]] |
 | 2018 | [[https://python-graph-gallery.com/matplotlib/][python-graph-gallery - matplotlib]]            |
 |      |                                              |
 - Notes:
   - twd = https://towardsdatascience.com
*** Using matplotlib interactive mode
- See [[https://matplotlib.org/tutorials/introductory/usage.html#what-is-interactive-mode][matplotlib > interactive mode]] for basics
- See [[https://matplotlib.org/tutorials/introductory/usage.html#backends][matlplotlib > backends]] for a list of supported backends
- See [[file:SiScLab_Task2-JupyterWidgets_Notes.org::*Using%20interactive%20matplotlib%20plots][Using interactive matplotlib plots]] for info on usage in IPython / Jupyter
*** Helper libs packages extensions
 | [[https://tonysyu.github.io/raw_content/matplotlib-style-gallery/gallery.html][matplotlib styles]] | predefined loadable styles for easier setup better output           |
 | seaborn           | can be used as an overlay to ~plt~ with ~sns.set()~, prettier plots |

** Jupyter (General)
*** Resources
*** Extension packages
 | lists   | [[https://github.com/markusschanta/awesome-jupyter][awesome-jupyter]] A curated list of awesome Jupyter projects       |
** Jupyter Widgets
*** Resources
 |---------+------------------------------------------------------------------|
 | widgets | http://jupyter.org/widgets                                       |
 |         | https://github.com/jupyter-widgets                               |
 |         | https://github.com/jupyter-widgets/tutorial                      |
 |         | [[https://mybinder.org/v2/gh/jupyter-widgets/tutorial/master][run above tutorial online in binder]]                              |
 |         | [[https://ipywidgets.readthedocs.io/en/stable/][ipywidgets @ readthedocs]]                                         |
 |         | [[https://ipywidgets.readthedocs.io/en/stable/examples/Widget%2520Styling.html#][ipywidgets > layout (useful for building compact dashboards)]]     |
 |         | [[https://www.blog.pythonlibrary.org/tag/jupyter/][pythonlibrary.org #jupyter]] (tricks on widgets, debugging, etc.)                            |
 |---------+------------------------------------------------------------------|
 | plot 2D | [[https://github.com/bloomberg/bqplot][bqplot]] interactive 2D viz: reompl. of D3 in jupyter              |
 |---------+------------------------------------------------------------------|
 | plot 3D | [[https://github.com/jupyter-widgets/pythreejs][pythreejs]] general purpose 3D visualization (overkill for SciVis) |
 |         | [[https://github.com/maartenbreddels/ipyvolume][ipyvolume]] subset for SciVis: 3D plotting ([[https://www.quora.com/What-is-the-difference-between-ipyvolume-and-pythreejs][source]])                |
 |         |                                                                  |
- bqplot:
  - big advantage: very powerful interactivity.
  - big advantage: even plots are widgets. so e.g. plots can have powerful
    interactions, like one plot interaction can be interaction input to another
    plot (example [[https://mybinder.org/v2/gh/bloomberg/bqplot/stable?filepath=examples/Index.ipynb][here]]).
*** Dashboarding Examples, Discussions
| [[https://github.com/JuanCab/AstroInteractives][JuanCab/AstroInteractives]]                | stellar layout examples of jupyter dashboards using ipywidgets |
| [[https://github.com/jupyter-widgets/ipywidgets/issues/2018][jupyter-widgets discussion: dashboarding]] | many useful links and insights                                 |
|                                          |                                                                |

** Jupyter Notebook (NB)
*** Resources
*** Extension packages: Dashboards
 |          | Name               | Description                                                              | Developers |
 |----------+--------------------+--------------------------------------------------------------------------+------------|
 |          | [[https://github.com/oschuett/appmode][appmode]]            | *works* turns notebooks into web applications (used in AiiDAlab)         |          3 |
 |----------+--------------------+--------------------------------------------------------------------------+------------|
 | alive    | [[https://github.com/jupyter/dashboards][Jupyter Dashboards]] | *buggy* Jupyter Dashboards (=GUI) Layout Extension                       |         17 |
 |          |                    | [[https://annefou.github.io/jupyter_dashboards/][software carpentry - jupyter dashboards tutorial incl. deployment]]        |            |
 |          |                    | [[https://jupyter-dashboards-layout.readthedocs.io/en/latest/using.html][dashboards doc - creating dashboard layouts]]                              |            |
 |----------+--------------------+--------------------------------------------------------------------------+------------|
 | in limbo | [[https://github.com/jupyter-attic/dashboards_server][Dashboards_server]]  | Server that runs and renders Jupyter notebooks as interactive dashboards |         11 |
 |          | [[https://github.com/maartenbreddels/flask-ipywidgets][flask-ipywidgets]]   | Use ipywidget in your Flask webserver                                    |          2 |

*** Extension packages: General
 | Name                      | Description                                          | Developers |
 |---------------------------+------------------------------------------------------+------------|
 | [[https://jupyter-contrib-nbextensions.readthedocs.io/en/latest/index.html][Contrib_nbextensions]]      | Bundled extensions incl. configurator                |         91 |
 | [[https://github.com/Jupyter-contrib/jupyter_nbextensions_configurator][nbextensions Configurator]] | tab with overview and disabling, included in contrib |            |
 | [[https://github.com/dunovank/jupyter-themes][jupyter-themes]]            | color themes. doesn't work so well (JW).             |         24 |
 | [[https://github.com/jcb91/jupyter_highlight_selected_word][highlight_selected_word]]   | does what it says, like in many IDEs                 |            |
 | [[https://github.com/KwatME/clean_ipynb][clean_ipynb]]               | reformat code in Jupyter (beta)                      |          1 |
 | [[https://github.com/damianavila/RISE][RISE]]                      | use notebook as interactive presentation slides      |         28 |
 Remarks:
 - Articles showcasing / highlighting particular extensions:
   - [[https://codeburst.io/jupyter-notebook-tricks-for-data-science-that-enhance-your-efficiency-95f98d3adee4][Nb tricks that enhance productivity]]
   - [[https://ndres.me/post/best-jupyter-notebook-extensions/][Top 5 Nb extensions]]
 - [[https://jupyter-contrib-nbextensions.readthedocs.io/en/latest/index.html][Contrib_nbextensions]]:
   - Usage: once installed, the configurator panel should be seen as tab
     'Extensions' on the main page. Otherwise it can be found at
     =JUPYTER-NB-URL/nbextensions=, and in an opened notebook's 'edit' tab.
 - RISE: [[https://www.youtube.com/watch?v=8Jktm-Imt-I&t=852s][example use (youtube)]]

** JupyterLab (Lab)
*** Resources
**** Intro
 - JupyterLab is a reimplementation of Jupyter Notebooks and it's eventual
   successor (2019/2020). Therefore, tools that work in Notebooks may not work
   in JupyterLab as of <2019-01-05 Sat>. It can be expected that most will be
   ported as time progresses.
 - JupyterLab solves many of the Notebook problems for which extensions have
   been built (drag&drop and tab interface, outputs can be displayed in separate
   tabs enabling simple dashboarding out-of-the-box). Therefore not all Notebook
   tools may be necessary anymore in JupyterLab.
 - read [[https://jupyterlab.readthedocs.io/en/stable/getting_started/overview.html][JupyterLab Doc / Overview]]
 - watch [[https://www.youtube.com/watch?v=ctOM-Gza04Y&t=549s][(video) 10min JupyterLab Overview Jun2018]]
 - [[https://www.youtube.com/watch?v=NSiPeoDpwuI][(video) 40min JupyterLab Overview Nov2018]]
**** How to install stuff
 - (Taken from [[https://jupyterlab.readthedocs.io/en/stable/user/extensions.html][JupyterLab Doc - Extensions]]) In general, most stuff for Jupyter
   Notebooks now also works in JupyterLab. If ~conda~ (Anaconda) is used instead
   of ~pip~ for Python envs, then only a one-liner has to be added for installing
   packages. Initially, nodejs has to be installed once:
   #+BEGIN_SRC shell
   conda install -c conda-forge nodejs # with conda
   brew install node # with homebrew macOS
   #+END_SRC
   Then, when installing a widget/extension, the following line has to be added
   to enable it in jupyterlab (the ~@version~ is optional):
   #+BEGIN_SRC shell
   jupyter labextension install my-extension
   jupyter labextension install my-extension@1.2.3 # to install a specific version
   #+END_SRC
   =my-extension= is normally an npm package, but can be a local dir, a local or
   online tarball.
   - List installed extentions:
   #+BEGIN_SRC shell
   jupyter labextension list
   #+END_SRC
   Extensions can be uninstalled, disabled, enabled, and so on. Read the doc.
**** Resources Table
  

 | official      | [[https://jupyterlab.readthedocs.io/en/stable/index.html][JupyterLab Doc]]                                |
 | best practice | [[https://florianwilhelm.info/2018/11/working_efficiently_with_jupyter_lab/][FWilhelm: Working effectively with JupyterLab]] |
*** Helper libs packages extensions
 |----------+------------------------------+-------------------------------------------------|
 | official | [[https://jupyterlab.readthedocs.io/en/stable/user/extensions.html][JupyterLab Doc - Extensions]]  | Must-read to understand install procedure       |
 |----------+------------------------------+-------------------------------------------------|
 |          | [[https://github.com/markusschanta/awesome-jupyter][awesome-jupyter]]              | A curated list of awesome Jupyter projects      |
 | lists    | [[https://github.com/mauhai/awesome-jupyterlab][awesome-jupyterlab]]           | A curated list of awesome JupyterLab extensions |
 |          | [[https://github.com/topics/jupyterlab-extension][GitHub #jupyterlab-extension]] | hashtag                                         |
 |----------+------------------------------+-------------------------------------------------|
 |          | [[https://github.com/QuantStack/jupyterlab-drawio][diagram editor by quantstack]] |                                                 |
 |          | [[https://github.com/plotly/jupyterlab-chart-editor][chart editor by plotly]]       | [[https://www.youtube.com/watch?v=zR7G2tNVo1Q][(video) 30min showcase Nov2018]]                  |
 |          |                              |                                                 |
** PyViz
- [[http://pyviz.org/tutorial/A2_Dashboard_Workflow.html][Tutorial: Dashboard Workflow]]
- [[http://panel.pyviz.org/user_guide/index.html][Panel Guide]]
- Note: Panel works also with matplotlib!
** Bokeh
*** Resources

 | official | [[https://bokeh.pydata.org/en/latest/][official home]]           |
 |          | [[http://nbviewer.jupyter.org/github/bokeh/bokeh-notebooks/blob/master/tutorial/00%2520-%2520Introduction%2520and%2520Setup.ipynb][nbviewer bokeh tutorial]] |
 |----------+-------------------------|

** Non-plotting tools helpful for masci-tools visualizations
 | [[http://pymatgen.org/][pymatgen]] | robust, open-source Python library for materials analysis |
 | [[http://atztogo.github.io/spglib/][spglib]]   | finding and handling crystal symmetries written in C      |
 |          |                                                           |
* Video Talks
- selection and list order favors Jupyter-based solutions
- [[https://www.youtube.com/playlist?list=PLYx7XA2nY5Gd-tNhm79CNMe_qvi35PgUR][SciPy 2018 Playlist]]:
  - Relevant:
    - [[https://www.youtube.com/watch?v=NBZBjEjN-rU&index=13&list=PLYx7XA2nY5Gd-tNhm79CNMe_qvi35PgUR&t=0s][The Jupyter Interactive Widget Ecosystem | SciPy 2018 Tutorial]]
    - [[https://www.youtube.com/watch?v=6gdNUDs6QPc&index=14&list=PLYx7XA2nY5Gd-tNhm79CNMe_qvi35PgUR&t=0s][Anatomy of Matplotlib (Beginner Level) | SciPy 2018 Tutorial]]
    - [[https://www.youtube.com/watch?v=hOKa8klJPyo&index=43&list=PLYx7XA2nY5Gd-tNhm79CNMe_qvi35PgUR&t=451s][Interactive 3D Visualization in Jupyter | SciPy 2018]]
    - [[https://www.youtube.com/watch?v=Gzun8PpyBCo&t=1807s&list=PLYx7XA2nY5Gd-tNhm79CNMe_qvi35PgUR&index=93][Getting Started with JupyterLab (Beginner Level) | SciPy 2018 Tutorial]]
  - Less relevant:
    - [[https://www.youtube.com/watch?v=Dmxa2Kyfzxk&index=50&list=PLYx7XA2nY5Gd-tNhm79CNMe_qvi35PgUR&t=509s][bqplot Seamless Interactive Visualizations and Dashboards in the Jupyter Notebook | SciPy 2018]]
    - [[https://www.youtube.com/watch?v=DGLi-UWReM8&index=96&list=PLYx7XA2nY5Gd-tNhm79CNMe_qvi35PgUR&t=977s][PyViz Unifying Python Tools for In Browser Data Visualization | SciPy 2018]]
    - [[https://www.youtube.com/watch?v=aZ1G_Q7ovmc&index=10&list=PLYx7XA2nY5Gd-tNhm79CNMe_qvi35PgUR&t=4543s][PyViz: Easy Visualization and Exploration for all your Data | SciPy 2018 Tutorial]]
    - [[https://www.youtube.com/watch?v=OpTwEYo2B6g&index=74&list=PLYx7XA2nY5Gd-tNhm79CNMe_qvi35PgUR&t=0s][Software Engineering Techniques (Beginner Level) | SciPy 2018 Tutorial]]
    - [[https://www.youtube.com/watch?v=IzXxTeQhdO0&t=1295s&list=PLYx7XA2nY5Gd-tNhm79CNMe_qvi35PgUR&index=61][Data Visualization for Scientific Discovery | SciPy 2018]]
    - [[https://www.youtube.com/watch?v=5dl_m_6T2bU&index=42&list=PLYx7XA2nY5Gd-tNhm79CNMe_qvi35PgUR&t=0s][Interactive Data Visualization Leveraging Jupyter, Rust and WebAssembly | SciPy 2018]]
- [[https://www.youtube.com/user/PyDataTV/playlists?disable_polymer=1][PyData Playlists]]:
  - Relevant:
    - [[https://www.youtube.com/playlist?list=PLGVZCDnMOq0reyEnGXyF5OX1KIquMIiXt][PyData Playlist: Jupyter]]
    - [[https://www.youtube.com/watch?v=NSiPeoDpwuI&list=PLGVZCDnMOq0reyEnGXyF5OX1KIquMIiXt&t=1443s&index=2][JupyterLab: The Evolution of the Jupyter Notebook | PyData Nov2018]]
    - [[https://www.youtube.com/watch?v=FwUcJFSAfQw&list=PLGVZCDnMOq0reyEnGXyF5OX1KIquMIiXt&index=8&t=815s][10 things you really should know about jupyter notebooks | PyData Nov2017]]
- [[https://www.youtube.com/playlist?list=PLYx7XA2nY5GfdAFycPLBdUDOUtdQIVoMf][SciPy 2017 Playlist]]:
  - Relevant:
    - [[https://www.youtube.com/watch?v=eWzY2nGfkXk&index=11&list=PLYx7XA2nY5GfdAFycPLBdUDOUtdQIVoMf&t=0s][The Jupyter Interactive Widget Ecosystem | SciPy 2017 Tutorial]]
    - [[https://www.youtube.com/watch?v=8Jktm-Imt-I&index=9&list=PLYx7XA2nY5GfdAFycPLBdUDOUtdQIVoMf&t=0s][Deploying Interactive Jupyter Dashboards for Visualizing Hundreds of Millions of Datapoints | SciPy 2017]]
    - [[https://www.youtube.com/watch?v=rARMKS8jE9g&index=10&list=PLYx7XA2nY5GfdAFycPLBdUDOUtdQIVoMf&t=0s][Anatomy of Matplotlib | SciPy 2017 Tutorial]]
  - Less relevant:
    - [[https://www.youtube.com/watch?v=cKmYFxmXZv0&index=35&list=PLYx7XA2nY5GfdAFycPLBdUDOUtdQIVoMf&t=0s][bqplot Seamless Interactive Visualizations in the Jupyter Notebook | SciPy 2017]]
    - [[https://www.youtube.com/watch?v=cMXKE0nB8k4&index=22&list=PLYx7XA2nY5GfdAFycPLBdUDOUtdQIVoMf&t=0s][Interactive Data Visualization with HoloViews & Bokeh | SciPy 2017 Tutorial]]
    - [[https://www.youtube.com/watch?v=sea2K4AuPOk&index=4&list=PLYx7XA2nY5GfdAFycPLBdUDOUtdQIVoMf&t=0s][Dash - A New Framework for Building User Interfaces for Technical Computing | SciPy 2017]]
    - [[https://www.youtube.com/watch?v=oXT7rBNkAZ8&index=12&list=PLYx7XA2nY5GfdAFycPLBdUDOUtdQIVoMf&t=0s][Python and Tableau Building an Interactive and Beautiful Data Visualization with TabPy | SciPy 2017]]



