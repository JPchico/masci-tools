#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+TITLE: SiScLab_Task2-GUI-Research_Notes
#+DATE: <2018-12-12 Mi>
#+AUTHOR: Johannes Wasmer
#+EMAIL: johannes@joe-9470m
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.2.2 (Org mode 9.1.13)

#+OPTIONS: html-link-use-abs-url:nil html-postamble:auto html-preamble:t
#+OPTIONS: html-scripts:t html-style:t html5-fancy:nil tex:t
#+HTML_DOCTYPE: xhtml-strict
#+HTML_CONTAINER: div
#+DESCRIPTION:
#+KEYWORDS:
#+HTML_LINK_HOME:
#+HTML_LINK_UP:
#+HTML_MATHJAX:
#+HTML_HEAD:
#+HTML_HEAD_EXTRA:
#+SUBTITLE:
#+INFOJS_OPT:
#+CREATOR: <a href="https://www.gnu.org/software/emacs/">Emacs</a> 25.2.2 (<a href="https://orgmode.org">Org</a> mode 9.1.13)
#+LATEX_HEADER:





#+NAME: fig:figure name
#+CAPTION: The Python Visualization Landscape 2017
#+ATTR_ORG: :width 800/200/250/300/400/500
#+ATTR_LATEX: :width 2.0in
#+ATTR_HTML: :width 800/200/250/300/400/500px
[[file:img/landscape.png]]
The Python Visualization Landscape 2017. [[https://github.com/rougier/python-visualization-landscape][source (clickable html graph)]].

* [[file:SiScLab_Notes.org][Master File]]
* Overview of AiiDAlab (=JupyterHub) - based Visualization Tools & Resources
- AiiDAlab ([[https://aiidalab.materialscloud.org/hub/login][aiidalab official]], [[https://github.com/aiidalab][aiidalab github]]) is a Jupyter server ([[https://github.com/jupyterhub/jupyterhub][JupyterHub]])
  accessible on materialscloud.org via login. So apps developed for it can use
  [[http://jupyter.org/widgets][Jupyter Widgets]] and be used by any aiidalab user anywhere. The problem of
  finding a solution that works in Jupyter *and can be deployed as standalone
  web-app* (see next section) is thus not eliminated, but can be ignored for the
  initial phase at least. I think long-term the possibilities PyViz is offering
  (see next section) should be at least tried out.
** [[https://github.com/aiidalab][AiiDAlab Tools]] / Resources for building AiiDAlab Apps
- For complementary Jupyter resources not used in AiiDAlab stack so far, see
  also section [[*Jupyter Widgets][Jupyter Widgets]] below.

|                   | Name                     | Description                                    |
|-------------------+--------------------------+------------------------------------------------|
| AiiDAlab          | [[https://github.com/aiidalab/aiidalab-widgets-base][aiidalab-idgets-base]]     | AiiDA widgets for AiiDA Lab applications       |
| (Jupyter)         | [[https://github.com/aiidalab/aiidalab-appmode][aiidalab-appmode]]         | turns notebooks into web applications          |
|                   | [[https://www.youtube.com/playlist?list=PL19kfLn4sO_8O_yQTL6KK0nC2adrrLqmi][Jupyter @ materialscloud]] | youtube playlist showing AiidaLab app creation |
|                   | [[https://github.com/aiidalab/aiidalab-registry][aiidalab-registry]]        | app registry to install apps                   |
|-------------------+--------------------------+------------------------------------------------|
| materialscloud    | [[https://github.com/aiidalab/aiidalab-app-cutter][aiidalab-app-cutter]]      | Cookie cutter recipe Materials Cloud apps      |
| tools (standalone | [[https://github.com/giovannipizzi/seekpath#online-service-tool][seekpath]]                 | example app code including deployment          |
| web-apps)         |                          |                                                |
|-------------------+--------------------------+------------------------------------------------|
|                   | [[https://aiida-core.readthedocs.io/en/stable/developer_guide/index.html][AiiDA developer doc]]      | ONLY AiiDA, nothing on AiiDAlab                |

* Overview of Open Source Python Browser Visualization Tools & Resources
- This overview is written with the emphasis of finding a solution that can be
  deployed in a Jupyter environment *as well as* a standalone web-app independent
  of Jupyter, like the [[https://www.materialscloud.org/work/tools/options][materialscloud tools]].
  #+BEGIN_QUOTE
   [[https://ipywidgets.readthedocs.io/en/stable/][ipywidgets]]-based libraries (ipyleaflet, pythreejs, ipyvolume, bqplot) are
   *difficult to deploy as public-facing apps because the Jupyter server allows
   arbitrary code execution*.
  #+END_QUOTE
  Though there are workarounds for this like [[https://mybinder.org/v2/gh/jupyter-widgets/tutorial/master][mybinder.org]].
** My personal summary
- *If non-public-only use: use Jupyter Widgets*. *If public use (standalon
  web-app), no Jupyter intended: use Dash*. /Those options are mutually
  exclusive/. *The middle-ground best long-term option /would/ be using [[http://pyviz.org/][Pyviz]]*,
  because it's qdifferent from the former two, it's deployable for Jupyter *and*
  as standalone web-app. *But*, PyViz has downsides for the intended application
  (minimal unmaintained 3D support, no Flask deployment yet), so it's out again.
  The last alternative is to do it like materialscloud and build an own solution
  only based on Flask, [[https://github.com/giovannipizzi/seekpath#online-service-tool][see example]]. Again, for that just could use Dash: /Dash
  uses a Flask server, so you can deploy Dash apps in the same way that you
  would deploy Flask apps/. But then we lose the Jupyter support again.
- For running a web-based GUI (=dashboard) with (interactive) plot
  visualization, there are basically four platforms to choose from: Jupyter,
  Plotly, or Bokeh, or a custom Flask+JavaScript solution (like [[https://www.materialscloud.org/infrastructure][materialscloud
  infrastructure]]). Jupyter is not a viable solution for web
  publication (like materialscloud tools), so basically two solutions for web
  publication remain: bokeh, or dask+flask (plotly) server. All other tools
  mentioned here support use in Jupyter notebooks, except maybe Dash. All other
  interactive tools mentioned here apart from dash/plotly use bokeh or custom
  solution for independent web publication.
- [[http://jupyter.org/widgets][Jupyter Widgets]]
  + mature
  - no standalone web apps (dashboards) possible, except through [[https://mybinder.org/v2/gh/jupyter-widgets/tutorial/master][binder]]
- [[http://pyviz.org/][Pyviz]]: [[https://panel.pyviz.org/][Panel]], [[http://holoviews.org/][Holoviews]]
  - very young project
  + ambitious goal: independence of actual plotting tools, or even web-based
    visualization (for example for run on HPC cluster, see [[https://www.youtube.com/watch?v=aZ1G_Q7ovmc&t=13m50s][pyviz scipy2018
    workshop]]). dashboards, run on any platform (jupyter, bokeh, mpl, plotly).
    declarative approach, e.g. quote from [[http://pyviz.org/tutorial/12_Parameters_and_Widgets.html][panel tutorial]]:
    #+BEGIN_QUOTE
    Panel provides layout and two-way communication between Python and
    browser-based widgets, either in a Jupyter Notebook or in a separate widely
    shareable deployment. In this way it's similar to ipywidgets in a Jupyter
    notebook or Plotly Dash on a standalone server, but allows you to develop in
    Jupyter and deploy separately because the same code works in both contexts
    (unlike for ipywidgets or Dash).
    #+END_QUOTE
    [[https://github.com/pyviz/panel/issues/2][Panel: supported plotting libraries]]
  - support currently only jupyter and bokeh though, plotly as backend support
    lacks volunteers/doc. support for deployment in flask is only on the
    [[http://pyviz.org/Roadmap.html][roadmap]].
  - *no 3D*. [[http://pyviz.org/Roadmap.html][roadmap]] mentions that simple scatter and surface 3d plots are
    possible using plotly backend. works on my browser, see example [[http://holoviews.org/reference/elements/plotly/Scatter3D.html][Scatter3D]],
    but warns there that plotly backend is not really supported. Seems
    application-focused on data science, geo services, not scivis. If SciVis
    stuff should be built, the PyViz guys more or less say, 'use Bokeh. We built
    HoloViews with Bokeh'. Sources: [[http://pyviz.org/FAQ.html][pyviz FAQ]], youtube [[https://www.youtube.com/watch?v=aZ1G_Q7ovmc&t=13m50s][pyviz scipy2018 workshop]],
    [[https://www.youtube.com/watch?v=DGLi-UWReM8&t=3m47s][pyviz scipy2018 talk]].
- [[https://github.com/bokeh/bokeh][Bokeh]] 
  - development: powerful but complicated, needs time
  - needs JavaScript knowledge
  + good jupyter integration
- [[https://plot.ly/products/dash/][Dash]] 
  + development: simple but fast, limited
  + best solution right now for building independent web app (dashboard) fast
  + built on plotly
  - bad jupyter integration
** Table Overview / Comparison
- Open Source: BSD, MIT license or similar
- Keywords: visualization, visual analytics, interactive, GUI, widgets,
  dashboard, web, browser-based, notebook
- in 2018, all libs have publication-quality publishing/export options

- *full interactive HTML5 with dashboard, widgets. all in active development 2018. all support 3D except PyViz.*
| Name             | age | description       | server         | Jupyter | Impression                         | developers |
|------------------+-----+-------------------+----------------+---------+------------------------------------+------------|
| [[http://pyviz.org/][pyviz]]: [[https://panel.pyviz.org/][Panel]]     |   1 | dashboards        | bokeh (plotly) | +       | cool, but mainly bokeh support     |         10 |
| [[http://pyviz.org/][pyviz]]: [[https://hvplot.pyviz.org/][hvPlot]]    |   1 | interactive plots | bokeh (plotly) | +       | just use holoviews?                |          9 |
| [[http://pyviz.org/][pyviz]]: [[http://holoviews.org/][holoviews]] |   2 | interactive plots | bokeh (plotly) | +       | declarative viz, tool-independent  |         42 |
| [[https://github.com/jwkvam/bowtie][bowtie]]           |   2 | dashboards        | ?              | +       | single-man effort                  |          3 |
| Plotly: [[https://plot.ly/products/dash/][Dash]]     |   3 | dashboards        | plotly         | o       | best for independent web app       |         22 |
| Plotly: [[https://plot.ly/][Plot.ly]]  |   4 | interactive plots | plotly         | +       | extensions: JavaScript             |         63 |
| [[http://jupyter.org/widgets][Jupyter Widgets]]  |   4 | dashboards, i.p.  | jupyter        | X       | best if jupyter lock-in acceptable |        120 |
| [[https://github.com/bokeh/bokeh][Bokeh]]            |   4 | interactive plots | bokeh          | X       | best if you have enough time       |        333 |


- UNFINISHED: stale development, or little support for interactivity, dashboard, widgets
| Name           | description                | interactive | DW | Jupyter | 3D | last update | developers | built on |
|----------------+----------------------------+-------------+----+---------+----+-------------+------------+----------|
| [[https://toyplot.readthedocs.io/en/stable/][toyplot]]        |                            | o           | o  | ?       | ?  |        2018 |          6 |          |
| [[http://pygal.org/en/stable/][pygal]]          | specializes on svg output  | o           | -  | ?       | ?  |        2017 |         53 |          |
| [[http://mpld3.github.io/][mpld3]]          |                            | +           | ?  | ?       | ?  |        2017 |         38 |          |
|----------------+----------------------------+-------------+----+---------+----+-------------+------------+----------|
| matplotlib     |                            | -           |    | +       | +  |             |            |          |
| [[https://pandas.pydata.org/pandas-docs/stable/visualization.html#automatic-date-tick-adjustment][pandas viz api]] | mlp overlay                | -           |    | +       | +  |             |            | mpl      |
| seaborn        | mlp overlay for statistics |             |    | +       | +  |             |            |          |
| [[http://ggplot.yhathq.com/][ggplot]]         | mlp overlay for statistics | -           |    | ?       | +  |        2016 |         14 |          |
Legend:
- DW = support for widgets, dashboard: + full, o partial, - no

** Resources for Overview / Comparisons
- [[https://www.anaconda.com/blog/developer-blog/python-data-visualization-2018-why-so-many-libraries/][Anaconda Blog: Python Data Visualization 2018: Part 1]], [[https://www.anaconda.com/blog/developer-blog/python-data-visualization-moving-toward-convergence/][Part 2]]
  - date: 2018
  - best overview
  - *Note: Opiniated: Author is creator of PyViz*
  - User interface:
    - Standalone web-based dashboards and apps
      - Dash: Plotly, Dash
      - Bokeh Server: Bokeh, HoloViews, and GeoViews
      - Panel: Matplotlib, Altair, Plotly, Datashader, hvPlot, Seaborn, plotnine, and yt
      - Jupyter: ipywidgets, ipyleaflet, pythreejs, ipyvolume, bqplot, Jupyter Dashboard
        - Note: difficult to deploy as public-facing apps because the Jupyter
          server allows arbitrary code execution: tool lock-in
    #+BEGIN_QUOTE
    Standalone web-based dashboards and apps: Plotly graphs can be used in
    separate deployable apps with [[https://plot.ly/products/dash/][Dash]], and Bokeh, HoloViews, and GeoViews can
    be deployed using [[https://bokeh.pydata.org/en/latest/docs/user_guide/server.html][Bokeh Server]]. Most of the other InfoVis libraries can be
    deployed as dashboards using the new Panel library, including at least
    Matplotlib, Altair, Plotly, Datashader, hvPlot, Seaborn, plotnine, and yt.
    However, despite their web-based interactivity, the [[https://ipywidgets.readthedocs.io/en/stable/][ipywidgets]]-based
    libraries (ipyleaflet, pythreejs, ipyvolume, bqplot) are *difficult to
    deploy as public-facing apps because the Jupyter server allows arbitrary
    code execution* (but see the defunct Jupyter dashboards project and
    flask-ipywidgets for potential solutions).
    #+END_QUOTE
  - Widget/app support:
    #+BEGIN_QUOTE
    Previous mechanisms for providing widgets and support for apps and
    dashboards were often specific to Python plotting libraries, such as Dash
    for Plotly and Bokeh Server/Bokeh Widgets for Bokeh. A wide variety of
    plotting libraries now support usage with ipywidgets, making it feasible to
    switch between them or combine them as needed for particular
    notebook-related tasks relatively easily. This broad base of support makes
    the particular choice of ipywidgets-based library less crucial at the outset
    of a project. Many different plotting libraries can also be used with the
    new Panel app/widget library, either using the ipywidgets-style “interact”
    interface or as separate objects, either in a Jupyter notebook or in a
    separate server
    #+END_QUOTE
  - 
- [[https://www.youtube.com/playlist?list=PLYx7XA2nY5Gd-tNhm79CNMe_qvi35PgUR][SciPy2018 Youtube Playlist]]
  - search 'visual': either jupyter or pyviz
- [[https://blog.sicara.com/bokeh-dash-best-dashboard-framework-python-shiny-alternative-c5b576375f7f][Medium: Bokeh vs Dash — Which is the Best Dashboard Framework for Python?]]
  - date: 2018
  - result: Dash wins
  | thing           | bokeh          | dash             |
  |-----------------+----------------+------------------|
  | by              | anaconda       | plotly           |
  | license         | bsd 3-clause   | mit permissive   |
  | Python backend  | Tornado        | Flask            |
  | JS frontend     | D3             | React + Plotly   |
  | Jupyter support | yes            | only plotly      |
  | Only Python?    | some JS needed | yes for core lib |
- [[https://bowtie-py.readthedocs.io/en/latest/comparison.html][bowtie doc: comparison with dash, bokeh]]
  - date: 2018
    - dash: need html knowledge. bokeh: is old, didn't try out
- [[https://github.com/rougier/python-visualization-landscape][PyCon2017 Keynote: The Python Visualization Landscape]]
  - date: 2017
  - video, slides, [[http://rougier.github.io/python-visualization-landscape/landscape-colors.html][clickable graph]]
  - compares: all
- [[https://blog.modeanalytics.com/python-interactive-plot-libraries/][modeanalytics: 5 Python Libraries for Creating Interactive Plots]]
  - date: 2016
  - compares: mpld3, pygal, bokeh, holoviews, plotly
- [[https://www.reddit.com/r/Python/comments/4tuwoz/how_do_you_decide_between_the_plotting_libraries/][reddit - How do you decide between the plotting libraries: Matplotlib, Seaborn, Bokeh?]]
  - date: 2016
  - 
- [[http://pbpython.com/visualization-tools-1.html][pbpython Overview Python Viz Tools]]
  - date: 2015
  - compares: seaborn, ggplot, bokeh, pygal, plotly
  - the gist: didn't care for interactive, web. excel user

* Jupyter Widgets

** Resources
| official | http://jupyter.org/widgets                                       |
|          | https://github.com/jupyter-widgets                               |
|          | https://github.com/jupyter-widgets/tutorial                      |
|          | [[https://mybinder.org/v2/gh/jupyter-widgets/tutorial/master][run above tutorial online in binder]]                              |
|          | [[https://ipywidgets.readthedocs.io/en/stable/][ipywidgets @ readthedocs]]                                         |
|----------+------------------------------------------------------------------|
|       2D | [[https://github.com/bloomberg/bqplot][bqplot]] interactive 2D viz                                        |
|----------+------------------------------------------------------------------|
|       3D | [[https://github.com/jupyter-widgets/pythreejs][pythreejs]] general purpose 3D visualization (overkill for SciVis) |
|          | [[https://github.com/maartenbreddels/ipyvolume][ipyvolume]] subset for SciVis: 3D plotting ([[https://www.quora.com/What-is-the-difference-between-ipyvolume-and-pythreejs][source]])                |
|          |                                                                  |

** Helper libs packages extensions
|            | Name                      | Description                                                              | Developers | D | A |
|------------+---------------------------+--------------------------------------------------------------------------+------------+---+---|
| alive      | [[https://github.com/jupyter/dashboards][Jupyter Dashboards]]        | *buggy* Jupyter Dashboards (=GUI) Layout Extension                       |         17 | X | X |
|            | [[https://github.com/oschuett/appmode][appmode]]                   | *works* turns notebooks into web applications (used in AiiDAlab)         |          3 | X | X |
|            | [[https://mybinder.org/v2/gh/jupyter-widgets/tutorial/master][mybinder.org]] / [[https://github.com/jupyterhub/binderhub][BinderHub]]  | Workaround for Jupyter standalone web-app deployment problem             |         32 | X |   |
|            | [[https://github.com/dunovank/jupyter-themes][jupyter-themes]]            | color themes                                                             |         24 |   | X |
|------------+---------------------------+--------------------------------------------------------------------------+------------+---+---|
|            | [[https://github.com/Jupyter-contrib/jupyter_nbextensions_configurator][nbextensions Configurator]] |                                                                          |            |   |   |
| extensions | [[https://github.com/jcb91/jupyter_highlight_selected_word][highlight_selected_word]]   | does what it says, like in many IDEs                                     |            |   |   |
|            | [[https://github.com/KwatME/clean_ipynb][clean_ipynb]]               | reformat code in Jupyter (beta)                                          |          1 |   |   |
|------------+---------------------------+--------------------------------------------------------------------------+------------+---+---|
| in limbo   | [[https://github.com/jupyter-attic/dashboards_server][Dashboards_server]]         | Server that runs and renders Jupyter notebooks as interactive dashboards |         11 | X | X |
|            | [[https://github.com/maartenbreddels/flask-ipywidgets][flask-ipywidgets]]          | Use ipywidget in your Flask webserver                                    |          2 | X |   |
Legend:
- A = App Appearance
- D = App Deployment
- U = Developer utility

* Bokeh
** Resources

| official | [[https://bokeh.pydata.org/en/latest/][official home]]           |
|          | [[http://nbviewer.jupyter.org/github/bokeh/bokeh-notebooks/blob/master/tutorial/00%2520-%2520Introduction%2520and%2520Setup.ipynb][nbviewer bokeh tutorial]] |
|----------+-------------------------|

* matploblib
** Helper libs packages extensions
| [[https://tonysyu.github.io/raw_content/matplotlib-style-gallery/gallery.html][matplotlib styles]] | predefined loadable styles for easier setup better output |

* Non-plotting tools helpful for masci-tools visualizations
| [[http://pymatgen.org/][pymatgen]] | robust, open-source Python library for materials analysis |
| [[http://atztogo.github.io/spglib/][spglib]]   | finding and handling crystal symmetries written in C      |
|          |                                                           |
