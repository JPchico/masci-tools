#+OPTIONS: ':nil *:t -:t ::t <:t H:3 \n:nil ^:t arch:headline author:t
#+OPTIONS: broken-links:nil c:nil creator:nil d:(not "LOGBOOK") date:t e:t
#+OPTIONS: email:nil f:t inline:t num:t p:nil pri:nil prop:nil stat:t tags:t
#+OPTIONS: tasks:t tex:t timestamp:t title:t toc:t todo:t |:t
#+TITLE: SiScLab_Task2-GUI_Notes
#+DATE: <2018-12-10 Mo>
#+AUTHOR: Johannes Wasmer
#+EMAIL: johannes@joe-9470m
#+LANGUAGE: en
#+SELECT_TAGS: export
#+EXCLUDE_TAGS: noexport
#+CREATOR: Emacs 25.2.2 (Org mode 9.1.13)

#+LATEX_CLASS: article
#+LATEX_CLASS_OPTIONS:
#+LATEX_HEADER:
#+LATEX_HEADER_EXTRA:
#+DESCRIPTION:
#+KEYWORDS:
#+SUBTITLE:
#+LATEX_COMPILER: pdflatex
#+DATE: \today

* [[file:SiScLab_Notes.org][Master File]]
* <2018-12-01 Sa> - <2018-12-10 Mo> Phase 1 - Building the model
The idea after [[file:SiScLab_Meetings_Notes.org::*<2018-11-21%20Wed>%20Meeting%20Ju2][<2018-11-21 Wed> Meeting Ju2]] was: Praneeth writes a Desktop GUI,
I a webbrowser GUI. I wanted to make sure that we/I rewrite the working code by
Christian into a common model-controller that can handle these two different
views (MVC). I started on <2018-12-01 Sa> on that. I got the idea to build a
*generic HDF reader* as model. It provides an extendable extract, transform and
load pipeline to build data types from a HDF file using recipes, and based on
Python introspection. It thought it'd take me 2-3 days, but it grew in
complexity and took until <2018-12-10 Mo>.

* <2018-12-11 Di> - <2018-12-11 Di> Phase 2 - Researching Python Web GUIs

** Overview of Open Source Python Visualization Tools
*** My overall summary notes
- For running a web-based GUI (=dashboard) with (interactive) plot
  visualization, there are basically four platforms to choose from: Jupyter,
  Plotly, or Bokeh, or a custom Flask+JavaScript solution (like [[https://www.materialscloud.org/infrastructure][materialscloud
  infrastructure]], [[https://github.com/giovannipizzi/seekpath#online-service-tool][example code]]). Jupyter is not a viable solution for web
  publication (like materialscloud tools), so basically two solutions for web
  publication remain: bokeh, or dask+flask (plotly) server. All other tools
  mentioned here support use in Jupyter notebooks, except maybe Dash. All other
  interactive tools mentioned here apart from dash/plotly use bokeh or custom
  solution for independent web publication.
- *So if non-public-only use: use Jupyter Widgets*. *If public-use intended: use
  Dash*. Those are mutually exclusive. *The middle-ground best long-term option
  is using [[http://pyviz.org/][Pyviz]]* (primarily Bokeh, but intent is on tool-independence). Or do
  it like materialscloud and build an own solution for
- [[http://jupyter.org/widgets][Jupyter Widgets]]
  + mature
  - no standalone web apps (dashboards) possible, except through [[https://mybinder.org/v2/gh/jupyter-widgets/tutorial/master][binder]]
- [[http://pyviz.org/][Pyviz]]: [[https://panel.pyviz.org/][Panel]], [[http://holoviews.org/][Holoviews]]
  - very young project
  + ambitious goal: independence of actual plotting tools. dashboards, run
    on any platform (jupyter, bokeh, mpl, plotly). declarative approach for
    plotting, decouples describing visualization from actual visualization tool.
  - support currently only jupyter and bokeh though, the plotly support lacks
    volunteers/doc.
- [[https://github.com/bokeh/bokeh][Bokeh]] 
  - development: powerful but complicated, needs time
  - needs JavaScript knowledge
  + good jupyter integration
- [[https://plot.ly/products/dash/][Dash]] 
  + development: simple but fast, limited
  + best solution right now for building independent web app (dashboard) fast
  + built on plotly
  - bad jupyter integration
*** Table Overview / Comparison
- Open Source: BSD, MIT license or similar
- Keywords: visualization, visual analytics, interactive, GUI, widgets,
  dashboard, web, browser-based, notebook
- in 2018, all libs have publication-quality publishing/export options

- *full interactive HTML5 with dashboard, widgets. all in active development 2018. all support 3D.*
| Name             | age | description       | server         | Jupyter | Impression                         | developers |
|------------------+-----+-------------------+----------------+---------+------------------------------------+------------|
| [[http://pyviz.org/][pyviz]]: [[https://panel.pyviz.org/][Panel]]     |   1 | dashboards        | bokeh (plotly) | +       | cool, but mainly bokeh support     |         10 |
| [[http://pyviz.org/][pyviz]]: [[https://hvplot.pyviz.org/][hvPlot]]    |   1 | interactive plots | bokeh (plotly) | +       | just use holoviews?                |          9 |
| [[http://pyviz.org/][pyviz]]: [[http://holoviews.org/][holoviews]] |   2 | interactive plots | bokeh (plotly) | +       | declarative viz, tool-independent  |         42 |
| [[https://github.com/jwkvam/bowtie][bowtie]]           |   2 | dashboards        | ?              | +       | single-man effort                  |          3 |
| Plotly: [[https://plot.ly/products/dash/][Dash]]     |   3 | dashboards        | plotly         | o       | best for independent web app       |         22 |
| Plotly: [[https://plot.ly/][Plot.ly]]  |   4 | interactive plots | plotly         | +       | extensions: JavaScript             |         63 |
| [[http://jupyter.org/widgets][Jupyter Widgets]]  |   4 | dashboards, i.p.  | jupyter        | X       | best if jupyter lock-in acceptable |        120 |
| [[https://github.com/bokeh/bokeh][Bokeh]]            |   4 | interactive plots | bokeh          | X       | best if you have enough time       |        333 |


- UNFINISHED: stale development, or little support for interactivity, dashboard, widgets
| Name           | description                | interactive | DW | Jupyter | 3D | last update | developers | built on |
|----------------+----------------------------+-------------+----+---------+----+-------------+------------+----------|
| [[https://toyplot.readthedocs.io/en/stable/][toyplot]]        |                            | o           | o  | ?       | ?  |        2018 |          6 |          |
| [[http://pygal.org/en/stable/][pygal]]          | specializes on svg output  | o           | -  | ?       | ?  |        2017 |         53 |          |
| [[http://mpld3.github.io/][mpld3]]          |                            | +           | ?  | ?       | ?  |        2017 |         38 |          |
|----------------+----------------------------+-------------+----+---------+----+-------------+------------+----------|
| matplotlib     |                            | -           |    | +       | +  |             |            |          |
| [[https://pandas.pydata.org/pandas-docs/stable/visualization.html#automatic-date-tick-adjustment][pandas viz api]] | mlp overlay                | -           |    | +       | +  |             |            | mpl      |
| seaborn        | mlp overlay for statistics |             |    | +       | +  |             |            |          |
| [[http://ggplot.yhathq.com/][ggplot]]         | mlp overlay for statistics | -           |    | ?       | +  |        2016 |         14 |          |
Legend:
- DW = support for widgets, dashboard: + full, o partial, - no

*** Resources for Overview / Comparisons
- [[https://www.anaconda.com/blog/developer-blog/python-data-visualization-2018-why-so-many-libraries/][Anaconda Blog: Python Data Visualization 2018: Part 1]], [[https://www.anaconda.com/blog/developer-blog/python-data-visualization-moving-toward-convergence/][Part 2]]
  - date: 2018
  - best overview
  - User interface:
    - Standalone web-based dashboards and apps
      - Dash: Plotly, Dash
      - Bokeh Server: Bokeh, HoloViews, and GeoViews
      - Panel: Matplotlib, Altair, Plotly, Datashader, hvPlot, Seaborn, plotnine, and yt
      - Jupyter: ipywidgets, ipyleaflet, pythreejs, ipyvolume, bqplot, Jupyter Dashboard
        - Note: difficult to deploy as public-facing apps because the Jupyter
          server allows arbitrary code execution: tool lock-in
  - Widget/app support:
    #+BEGIN_QUOTE
    Previous mechanisms for providing widgets and support for apps and
    dashboards were often specific to Python plotting libraries, such as Dash
    for Plotly and Bokeh Server/Bokeh Widgets for Bokeh. A wide variety of
    plotting libraries now support usage with ipywidgets, making it feasible to
    switch between them or combine them as needed for particular
    notebook-related tasks relatively easily. This broad base of support makes
    the particular choice of ipywidgets-based library less crucial at the outset
    of a project. Many different plotting libraries can also be used with the
    new Panel app/widget library, either using the ipywidgets-style “interact”
    interface or as separate objects, either in a Jupyter notebook or in a
    separate server
    #+END_QUOTE
  - 
- [[https://blog.sicara.com/bokeh-dash-best-dashboard-framework-python-shiny-alternative-c5b576375f7f][Medium: Bokeh vs Dash — Which is the Best Dashboard Framework for Python?]]
  - date: 2018
  - result: Dash wins
  | thing           | bokeh          | dash             |
  |-----------------+----------------+------------------|
  | by              | anaconda       | plotly           |
  | license         | bsd 3-clause   | mit permissive   |
  | Python backend  | Tornado        | Flask            |
  | JS frontend     | D3             | React + Plotly   |
  | Jupyter support | yes            | only plotly      |
  | Only Python?    | some JS needed | yes for core lib |
- [[https://bowtie-py.readthedocs.io/en/latest/comparison.html][bowtie doc: comparison with dash, bokeh]]
  - date: 2018
    - dash: need html knowledge. bokeh: is old, didn't try out
- [[https://github.com/rougier/python-visualization-landscape][PyCon2017 Keynote: The Python Visualization Landscape]]
  - date: 2017
  - video, slides, [[http://rougier.github.io/python-visualization-landscape/landscape-colors.html][clickable graph]]
  - compares: all
- [[https://blog.modeanalytics.com/python-interactive-plot-libraries/][modeanalytics: 5 Python Libraries for Creating Interactive Plots]]
  - date: 2016
  - compares: mpld3, pygal, bokeh, holoviews, plotly
- [[https://www.reddit.com/r/Python/comments/4tuwoz/how_do_you_decide_between_the_plotting_libraries/][reddit - How do you decide between the plotting libraries: Matplotlib, Seaborn, Bokeh?]]
  - date: 2016
  - 
- [[http://pbpython.com/visualization-tools-1.html][pbpython Overview Python Viz Tools]]
  - date: 2015
  - compares: seaborn, ggplot, bokeh, pygal, plotly
  - the gist: didn't care for interactive, web. excel user





** Jupyter Widgets

*** Resources
| official | http://jupyter.org/widgets                  |
|          | https://github.com/jupyter-widgets          |
|          | https://github.com/jupyter-widgets/tutorial |
|          | [[https://mybinder.org/v2/gh/jupyter-widgets/tutorial/master][run above tutorial online in binder]]         |
|          | [[https://ipywidgets.readthedocs.io/en/stable/][ipywidgets @ readthedocs]]                    |
|----------+---------------------------------------------|
|          |                                             |

*** Helper libs packages extensions
| Jupyter Dashboard |                                      |
| Binder            | online publication of notebook repos |
** Bokeh
*** Resources

| official | [[https://bokeh.pydata.org/en/latest/][official home]]           |
|          | [[http://nbviewer.jupyter.org/github/bokeh/bokeh-notebooks/blob/master/tutorial/00%2520-%2520Introduction%2520and%2520Setup.ipynb][nbviewer bokeh tutorial]] |
|----------+-------------------------|

** matploblib
*** Helper libs packages extensions
| [[https://tonysyu.github.io/raw_content/matplotlib-style-gallery/gallery.html][matplotlib styles]] | predefined loadable styles for easier setup better output |

** Non-plotting tools helpful for masci-tools visualizations
| [[http://pymatgen.org/][pymatgen]] | robust, open-source Python library for materials analysis |
| [[http://atztogo.github.io/spglib/][spglib]]   | finding and handling crystal symmetries written in C      |
|          |                                                           |
* <2018-12-11 Di> - <2018-12-12 Mi> Phase 3 - Building minimal Jupyter Dashboard


